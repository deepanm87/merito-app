// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id
  email String @unique
  subscriptionStatus String @default("inactive") @map("subscription_status")
  subscriptionPriceId String? @map("subscription_price_id")
  subscriptionStartDate DateTime @default(now()) @map("subscription_start_date")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  forms Form[]

  @@map("users")
}

model Form {
  id String @id
  userId String @map("user_id")
  name String
  description String?
  thankYouMessage String? @map("thank_you_message")
  formType String @default("testimonial") @map("form_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  testimonials Testimonial[]

  @@map("forms")
}

model Testimonial {
  id Int @id @default(autoincrement())
  formId String @map("form_id")
  name String
  role String?
  testimonial String
  rating Int @default(5)
  status String @default("pending")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("testimonials")
}


